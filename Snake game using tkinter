from tkinter import *
import random

GAME_WIDTH = 700
GAME_HEIGHT = 700
# Speed of snake
SPEED = 50
# Size of the objects and snake
SPACE_SIZE = 50
# How many body parts the snake has at the beginning
BODY_PARTS = 3
SNAKE_COLOR = "blue"
FOOD_COLOR = "green"
BACKGROUND_COLOR = "purple"


# Creates the Snake
class Snake:
    def __init__(self):
        self.body_size = BODY_PARTS
        self.coordinates = []
        self.squares = []

        for each in range(0, BODY_PARTS):
            self.coordinates.append([0, 0])
        for x, y in self.coordinates:
            square = canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=SNAKE_COLOR)
            self.squares.append(square)


# Creates the food for the snake(point system)
class Food:
    def __init__(self):
        x = random.randint(0, (GAME_WIDTH / SPACE_SIZE) - 1) * SPACE_SIZE
        y = random.randint(0, (GAME_HEIGHT / SPACE_SIZE) - 1) * SPACE_SIZE

        self.coordinates = [x, y]
        canvas.create_oval(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=FOOD_COLOR, tags="food")


# Allows the snake to move and eat the food
def next_turn(snake, food):
    x, y = snake.coordinates[0]

    if direction == "up":
        y -= SPACE_SIZE
    elif direction == "down":
        y += SPACE_SIZE
    elif direction == "right":
        x -= SPACE_SIZE
    elif direction == "left":
        x += SPACE_SIZE

    snake.coordinates.insert(0, (x, y))

    square = canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=SNAKE_COLOR)
    snake.squares.insert(0, square)
    if x == food.coordinates[0] and y == food.coordinates[1]:
        global score
        score += 1
        label.config(text="Score:{}".format(score))
        canvas.delete("food")
        food = Food()
    else:
        del snake.coordinates[-1]
        canvas.delete(snake.squares[-1])
        del snake.squares[-1]

    if check_collisions(snake):
        game_over()

    else:
        window.after(SPEED, next_turn, snake, food)


# Restrictions for how the snake will move
def change_direction(new_direction):
    global direction

    if new_direction == 'right':
        if direction != 'left':
            direction = new_direction
    elif new_direction == 'left':
        if direction != 'right':
            direction = new_direction
    elif new_direction == 'up':
        if direction != 'down':
            direction = new_direction
    elif new_direction == 'down':
        if direction != 'up':
            direction = new_direction


# Ends the game if the snake collides with itself or with any of the walls
def check_collisions(snake):
    x, y = snake.coordinates[0]
    if x < 0 or x >= GAME_WIDTH:
        return True
    elif y < 0 or y >= GAME_HEIGHT:
        return True

    for each in snake.coordinates[1:]:
        if x == each[0] and y == each[1]:
            return True

    return False


# Ends the game
def game_over():
    canvas.delete(ALL)
    canvas.create_text(canvas.winfo_width() / 2, canvas.winfo_height() / 2, font=('arial', 70), text="GAME OVER",
                       fill="blue")


# The window
window = Tk()
window.title("Omar's Snake Game")
window.resizable(False, False)
# Creating the score for the game
score = 0
direction = 'down'

label = Label(window, text="Score:{}".format(score), font=('arial', 40))
label.pack()

canvas = Canvas(window, bg=BACKGROUND_COLOR, heigh=GAME_HEIGHT, width=GAME_WIDTH)
canvas.pack()
# Binding Arrow keys
window.bind('<Left>', lambda event: change_direction('right'))
window.bind('<Right>', lambda event: change_direction('left'))
window.bind('<Up>', lambda event: change_direction('up'))
window.bind('<Down>', lambda event: change_direction('down'))
# Runs the classes and functions
snake = Snake()
food = Food()
next_turn(snake, food)

window.mainloop()
